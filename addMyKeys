#!/usr/bin/env bash

if isMacOS; then
    cat >&2 << 'EOF'

    You probably do NOT want to run this. Please review the following

        https://apple.stackexchange.com/questions/48502/how-can-i-permanently-add-my-ssh-private-key-to-keychain-so-it-is-automatically/250572#250572
        https://docs.github.com/en/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
        https://superuser.com/questions/280808/filezilla-on-mac-sftp-with-passwordless-authentication

    Keys should be added manually, and key handling specified in ~/.ssh/config
EOF
else
    cat >&2 <<'EOF'

    Keys are mostly/likely/only managed on the main laptop.

    According to `isMacOS`, you are not on the main laptop.
EOF
fi
exit 1

myExit ()
{
    [[ -n $1 ]] && { status=$1; shift; } || status=1
    message="$*"
    [[ -n $message ]] && echo $message
    case $status in
        [0-9][0-9]*)
            exit $status
            ;;
        *)
            exit 101
            ;;
    esac
}

# Only do this on the Mac mini; this is a good enough check for now
isMacOS || myExit 1

keyList=~/.ssh/keysToAdd
[[ ! -r $keyList ]] && myExit 3

# Read the list of key files into a variable (could just as easily put the
# cat command in the for...; construct). DO NOT read the file a line at a 
# time in the while loop, because this THROWS OFF ssh-add and makes it try
# to use ssh-askpass
keyFiles=$(cat $keyList)
for key in $keyFiles; do
    keyFile=~/.ssh/$key
    [[ -r $keyFile ]] && ssh-add -K $keyFile
done


#!/usr/bin/env bash

# everything should be good to go now; get defensive
set -u

VIMPLUGS="vimplugs"
VIMPACKS="vimpacks"
MANIFEST="manifest"
DOVIM=""
NODOVIM=""
declare -A TARGET_DIRS=()
declare -A hardLinkedFiles=()
declare -a hardLinks=()
declare fileManifest=""
TARGET_DIRS[myBinFiles]=~/bin
TARGET_DIRS[myDotFiles]=~
declare -a SOURCES=()

options=":"     # handle option errors specifically
options+="i"  ; init=""
options+="V"  ; NODOVIM=""
options+="b"  ; # check myBinFiles
options+="d"  ; # check myDotFiles
while getopts $options opt; do case $opt in
    i) init="yes";;
    V) NODOVIM="yesWhichMeansNo" ;;
    b) SOURCES+=(myBinFiles)     ;;
    d) SOURCES+=(myDotFiles)     ;;
    *) printf >&2 "Unknown option '%s', ignoring\n" "${opt}" ;;
esac; done
shift $((OPTIND - 1))
[[ $# -eq 1 && -d "$1" ]] && cd "$1"

# are we doing a specific directory, or all?
# first, check our cwd to determine if specific
myDir=$(pwd)
baseDir=$(basename "${myDir}")
for targetDir in "${!TARGET_DIRS[@]}"; do
    [[ $baseDir == "$targetDir" ]] && { SOURCES+=("$myDir"); break; }
done

if [[ ${#SOURCES[@]} -eq 0 ]]; then
    # we are doing all of them....
    # first, make sure we can find one and only one of each one
    for targetDir in "${!TARGET_DIRS[@]}"; do
        possibleDir=$(find ~ -xdev -type d -name ${targetDir} -print 2> /dev/null)
        dirCount=$(echo "${possibleDir}" | wc -l)
        if [[ $dirCount -ne 1 ]]; then
            printf >&2 "For '%s', wanted one targetDir, got %s, skipping\n" "${targetDir}" "${dirCount}"
            continue
        fi
        SOURCES+=("$possibleDir")
    done
fi

# SOURCES is set to one or more directories to be processed;
# carry on....

addThis () {
    # TK add defensive uniqueness check
    fileManifest+=" $1"
}

addHardLinkedFile () {
    # TK add defensive uniqueness check
    addThis "$1"
    hardLinkedFiles[$1]="${*:2}"
}

diffColorOption () {
    if diff --color=always 2> /dev/null; then
        echo "--color=always"
    else
        echo ""
    fi
}

replaceOrSwap () {
    anyDiffs=yes
    diff $(diffColorOption) -u ${targetDir}/${file} ${sourceDir}/${file}
    echo; echo "If + is wanted, 'y'; if - is wanted, 'swap'; 'd' deletes '-'; otherwise, anything else."
    read -r -p "Replace $file in ~? " answer
    case $answer in
        y*|Y*|+)
            makeOrUpdate
            ;;
        swap|-)
            replace
            ;;
        d)
            rm ${targetDir}/${file}
            ;;
        *)
            :
            ;;
    esac
}

replace () {
    cp -p ${targetDir}/${file} ${sourceDir}/${file} || printf >&2 "Error copying!!!\n"
}

makeOrUpdate () {
    cp -p ${sourceDir}/${file} ${targetDir}/${file} || printf >&2 "Error copying!!!\n"
}

addMissing () {
    doIt="no"
    anyDiffs=yes
    if [[ $init == "yes" ]]; then
        doIt="yes"
    else
        echo "The file '${targetDir}/${file}' does not exist;"
        read -p "createit from '${sourceDir}/${file}'? " answer
        case $answer in
            y*|Y*)
                doIt="yes"
                ;;
            *)
                :
                ;;
        esac
    fi
    [[ $doIt == "yes" ]] && makeOrUpdate
}

gitStatus () {
    local dir=""
    [[ $# -eq 1 ]] && dir="${1}"
    if [[ $dir ]]; then
        local gitStat=""
        if git -C $dir status &> /dev/null; then
            git -C $dir status
        else
            (cd $dir && git status)
        fi
    fi

}

for sourceDir in "${SOURCES[@]}"; do
    baseDir=$(basename "${sourceDir}")
    targetDir=${TARGET_DIRS[$baseDir]}
    case $baseDir in
        myBinFiles)
            if [[ ! -f $targetDir ]]; then
                mkdir -p $targetDir
            fi
            DOVIM=""
            ;;
        myDotFiles)
            [[ ! $NODOVIM ]] && DOVIM="yes"
            ;;
    esac
    # are we actually in the sourceDir?
    foundManifest=""
    for possibleSourceDir in "${sourceDir}" ~/"${sourceDir}" ~/"myPlumbing/${sourceDir}"; do
        possibleSourceDir=$(realpath ${possibleSourceDir})
        theManifest="${possibleSourceDir}/${MANIFEST}"
        [[ ! -f ${theManifest} || ! -s ${theManifest} ]] && continue
        foundManifest="yes" && break
    done
    [[ ! $foundManifest ]] && { printf >&2 "No manifest, very odd, skipping '%s'.\n" "${sourceDir}"; continue; }
    sourceDir="${possibleSourceDir}"

    (
        # this sets fileManifest
        # this also sets hardLinkedFiles
        source "${theManifest}" || { printf >&2 "Cannot source '%s', exiting.\n" "${theManifest}"; exit 7; }

        anyDiffs=no
        for file in $fileManifest; do
            if [[ ! -f ${targetDir}/${file} ]]; then
                addMissing
            else
                if ! diff -q ${targetDir}/${file} ${sourceDir}/${file} 2> /dev/null; then
                    replaceOrSwap
                fi
            fi
            if [[ -f ${targetDir}/${file} && ${hardLinkedFiles[$file]:+IS_SET} ]]; then
                for linkToMake in ${hardLinkedFiles[$file]}; do
                    hardLinks+=(${linkToMake})
                    rm -f ${targetDir}/${linkToMake}
                    ln ${targetDir}/${file} ${targetDir}/${linkToMake} || >&2 printf "Could not create link from '%s' to '%s'\n" ${targetDir}/${file} ${targetDir}/${linkToMake}
                done
            fi
        done

        [[ ${anyDiffs} == no ]] && { printf >&2 "No diffs, no need to change anything.\n"; gitStatus $sourceDir ; } || true

        if [[ $baseDir == "myBinFiles" ]]; then
            declare -a extras=()
            while read -r; do
                file=$(basename "$REPLY")
                [[ -f $sourceDir/$file ]] && continue
                for linkFile in ${hardLinks[@]}; do
                    [[ ${file} == "${linkFile}" ]] && continue 2
                done
                extras+=($file)
            done < <(ls "${targetDir}")
            [[ ${#extras[@]} -gt 0 ]] && printf "Extras:\t"
            for file in "${extras[@]}"; do
                printf "%s " $file
            done
            [[ ${#extras[@]} -gt 0 ]] && printf "\n"
        fi
    )

    if [[ $DOVIM ]]; then
        if type ${VIMPLUGS} &> /dev/null; then
            ${VIMPLUGS} ${sourceDir}/${VIMPACKS}
        else
            printf >&2 "Update bin files first, please\n"
            exit 1
        fi
    fi

done

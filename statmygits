#!/usr/bin/env bash

# everything should be good to go now; get defensive
set -u

VIMPLUGS="vimplugs"
VIMPACKS="vimpacks"
MANIFEST="manifest"
BINFILES=~/bin
DOTFILES=~
DOVIM=""
DO_THESE=()

init=""
while getopts i opt; do case $opt in
    i) init="yes";;
    *) printf >&2 "Unknown option '%s', ignoring" "${opt}" ;;
esac; done
shift $((OPTIND - 1))

myDir=$(pwd)
for dir in "${BINFILES}" "${DOTFILES}"; do
    [[ $myDir == "${dir}" ]] && DO_THESE+=("$dir")
done
[[ ${#DO_THESE} -eq 0 ]] && DO_THESE=("${BINFILES}" "${DOTFILES}")

diffColorOption () {
    if diff --color=always . . 2> /dev/null; then
        echo "--color=always"
    else
        echo ""
    fi
}

replaceOrSwap () {
    anyDiffs=yes
    diff $(diffColorOption) -u ${compareWith}/${file} ${myDir}/${file}
    echo; echo "If + is wanted, 'y'; if - is wanted, 'swap'; 'd' deletes '-'; otherwise, anything else."
    read -p "Replace $file in ~? " answer
    case $answer in
        y*|Y*)
            makeOrUpdate
            ;;
        swap)
            replace
            ;;
        d)
            rm ${compareWith}/${file}
            ;;
        *)
            :
            ;;
    esac
}

replace () {
    cp -p ${compareWith}/${file} ${myDir}/${file} || echo Error copying!!!
}

makeOrUpdate () {
    cp -p ${myDir}/${file} ${compareWith}/${file} || echo Error copying!!!
}

addMissing () {
    doIt="no"
    anyDiffs=yes
    if [[ $init == "yes" ]]; then
        doIt="yes"
    else
        echo "The file '${compareWith}/${file}' does not exist;"
        read -p "createit from '${myDir}/${file}'? " answer
        case $answer in
            y*|Y*)
                doIt="yes"
                ;;
            *)
                :
                ;;
        esac
    fi
    [[ $doIt == "yes" ]] && makeOrUpdate
}

anyDiffs=no
for file in $fileManifest; do
    [[ ! -f ${compareWith}/${file} ]] && { addMissing; continue; }
    diff -q ${compareWith}/${file} ${myDir}/${file} 2> /dev/null || { replaceOrSwap; continue; }
done

[[ ${anyDiffs} = no ]] && { echo "No diffs, no need to change anything."; git status; } || true

for dir in "${DO_THESE[@]}"; do
    case $dir in
        myBinFiles)
            compareWith=~/bin
            if [[ ! -f $compareWith ]]; then
                mkdir -p $compareWith
            fi
            ;;
        myDotFiles)
            compareWith=~
            DOVIM="yes"
            ;;
    esac
    theManifest=${myDir}/manifest
    [[ ! -s ${theManifest} ]] && { echo "No manifest, very odd, exiting."; exit 5; }

# this sets fileManifest
source "${theManifest}" || { echo "Cannot source '${theManifest}', exiting."; exit 7; }


done

if [[ $DOVIM ]]; then
    if type ${VIMPLUGS} &> /dev/null; then
        ${VIMPLUGS} ${VIMPACKS}
    else
        printf >&2 "Update bin files first, please"
        exit 1
    fi
fi

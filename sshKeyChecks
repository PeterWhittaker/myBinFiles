#!/usr/bin/env bash

# Do this first, no point doing anything else if it is missing
workingDir=~/.ssh/
[[ ! -d $workingDir ]] && errorAndExit 1 "Cannot locate .ssh folder '${workingDir}', exiting"
cd $workingDir || errorAndExit 3 "Cannot cd to .ssh folder '${workingDir}', exiting"

# convenience functions...
stdErr ()       { printf >&2 "%s\n" "${*}"; }
errorAndExit () { stdErr "${@:1}"; exit "${1:-1}"; }

# debugging function and marker
doDebug=""
debug () { [[ $doDebug ]] && stdErr "${*}"; }

# process command options, if any
OPTIND=1; while getopts :d opt; do case $opt in
    d) doDebug="yes" ;;
    ?) stdErr "Unknown option '${OPTARG}'"      ;;
    #:) stdErr "Missing value for '${OPTARG}' option"    ;;
esac; done; shift $((OPTIND - 1))

# we use this extensively
myHost=$(hostname)
# we do not use this, yet
# myKeyDB=~/myKeyDB

# all of our keys, if any
declare -A myKeys
# hosts we can reach, if any
declare -A myHosts
# keys to those hosts, if any
declare -A keysToHosts
# keys known to ssh-add, if any
declare -A addedKeys

# what keys are known to ssh-add?
while read -r size hashAndFingerprint restOfLine; do
    fingerprint="${hashAndFingerprint#*:}"
    addedKeys[$fingerprint]="yes"
done <<<$(ssh-add -l 2> /dev/null)

readConfigFile () {
    comment='^[[:space:]]#'
    hostLine='^Host[[:space:]]'
    allHosts='^Host[[:space:]]*\*'
    idenLine='^[[:space:]]*IdentityFile'
    nameLine='^[[:space:]]*Hostname'
    userLine='^[[:space:]]*User'
    blankLine='^[[:space:]]*$'
    curHost=''
    curIden=''
    curName=''
    curUser=''
    reading=""
    while read -r LINE; do
        if [[ $LINE =~ $blankLine ]]; then
            if [[ $reading ]]; then
                # we were reading a Host entry, and we have come to the end of it
                # handle the case where there was no Hostname line: use the contents of Host line
                [[ ! $curName ]] && curName="${curHost}"
                myHosts[${myHost}:${curName}]="$curIden:$curHost:$curUser"
                curHost=''
                curIden=''
                curName=''
                curUser=''
                reading=""
            fi
            # regardless of whether or not we were reading, head to the next line
            continue
        fi

        # skip comments, regardless of state
        [[ $LINE =~ $comment ]] && continue

        if [[ $LINE =~ $hostLine && ! $LINE =~ $allHosts ]]; then
            # we have found an entry block, so start reading
            reading="yes"
            # this is the easiest way to remove leading spaces...
            curHost=$(echo ${LINE#*[[:space:]]})
            continue
        fi

        # pick out what we care about when reading
        if [[ $reading ]]; then
            [[ $LINE =~ $idenLine ]] && curIden=$(basename ${LINE##*[[:space:]]})
            [[ $LINE =~ $userLine ]] && curUser=${LINE##*[[:space:]]}
            [[ $LINE =~ $nameLine ]] && curName=${LINE##*[[:space:]]}
            continue
        fi

        # if we get here and WERE reading, we found something
        # we don't know about but might care about
        if [[ $reading ]]; then
            stdErr "Found '$LINE' while reading: Should we care?"
        fi

        # if we get here either we've reported on something that
        # maybe we should care about or we weren't reading, so
        continue
        # which would happen at the done anyway

    done < $cfgFile
    # get the last one
    debug "'$myHost:$curHost:$curIden:$curName:$curUser'"
}

checkIfKeyIsKnown () {
    local fingerPrint="${1:-""}"
    if [[ $fingerPrint && ${addedKeys[$fingerPrint]} ]]; then
        printf "\tThis key is known to ssh-add"
    else
        printf "\tThis key is NOT known to ssh-add"
    fi
}

# first, get basic data about all of our keys
for pubKey in *pub; do
    privKey=$(basename "$pubKey" .pub)
    fullDetails=$(ssh-keygen -l -f "$pubKey")
    read -r bitLength fullFingerPrint myId algorithm <<<"${fullDetails}"
    algorithm=$(echo "$algorithm" | tr -d '()')
    IFS=: read -r hashType fingerPrint <<<"${fullFingerPrint}"
    debug $fingerPrint $hashType $myId $algorithm $bitLength $privKey
    myKeys[${fingerPrint}]="$hashType:$privKey:$myId:$algorithm:$bitLength"
done

[[ $doDebug ]] && for key in "${!myKeys[@]}"; do
    stdErr ${myKeys[$key]}
done

cfgFile="${workingDir}/config"
# check out config entries, if any - this sets myHosts
if [[ -f $cfgFile && -r $cfgFile && -s $cfgFile ]]; then
    readConfigFile
else
    stdErr "There is no '${cfgFile}' on this host"
fi

# process any keys from ${cfgFile}
declare -i maxHostKey=0
declare -i maxHostFrom=0
declare -i maxHostTo=0
for key in "${!myHosts[@]}"; do
    hostFrom=${key%:*};        hostFromLen=${#hostFrom}; (( hostFromLen > maxHostFrom )) && (( maxHostFrom = hostFromLen ))
    hostTo=${key#*:};          hostToLen=${#hostTo};     (( hostToLen > maxHostTo ))     && (( maxHostTo = hostToLen ))
    hostKeyInfo=${myHosts[$key]}; hostKey=${hostKeyInfo%:*};
                               hostKeyLen=${#hostKey};   (( hostKeyLen > maxHostKey ))   && (( maxHostKey = hostKeyLen ))
   echo $hostFrom $hostTo $hostKey
done

declare -a skippedKeys=()
for key in "${!myHosts[@]}"; do
    hostFrom=${key%:*}
    hostTo=${key#*:}
    hostKeyInfo=${myHosts[$key]}; hostKey=${hostKeyInfo%:*};
    printf "%-${maxHostFrom}s goes to %-${maxHostTo}s using %-${maxHostKey}s" $hostFrom $hostTo $hostKeyInfo
    thisKey=${myHosts[$key]%%:*}
    [[ -z $thisKey ]] && { skippedKeys+=("Skipping '$key'; hostFrom: '$hostFrom'; hostTo: '$hostTo'"); printf "\n"; continue; }

    fullDetails=$(ssh-keygen -l -f $thisKey)
    read -r bitLength fullFingerPrint myId algorithm <<<${fullDetails}
    IFS=: read -r hashType fingerPrint <<<${fullFingerPrint}
    printf "\t($fingerPrint)"
    checkIfKeyIsKnown $fingerPrint
    printf "\n"
    keysToHosts[$thisKey]+="$hostTo "
done
printf "\n"
printf "%s\n" "${skippedKeys[@]}"
printf "\n"

# more information on each of our keys
for key in "${!myKeys[@]}"; do
    IFS=: read -r hashType keyFile theRest <<<${myKeys[$key]}
    keyGenMsg="${key}: $keyFile"
    keyDate=$(ls -l --time-style='+%Y-%m-%d' $keyFile 2> /dev/null|tr -s ' '| cut -d' ' -f6)
    [[ -z $keyDate ]] && keyDate=$(ls -l  $keyFile 2> /dev/null|tr -s ' '| cut -d' ' -f6-8)
    [[ $keyDate ]] && keyGenMsg+=", generated $keyDate,"
    if [[ -z ${keysToHosts[$keyFile]} ]]; then
        printf "%s is NOT used" $keyGenMsg
    else
        printf "%s is used for: " $keyGenMsg
        hostsForThisKey=(${keysToHosts[$keyFile]})
        numHosts=${#hostsForThisKey[@]}
        hostCount=0
        [[ $numHosts -gt 0 ]] && printf "\t\t"
        for host in ${keysToHosts[$keyFile]}; do
            printf $host
            ((hostCount++))
            if [[ $hostCount -lt $numHosts ]]; then
                printf ", "
            else
                printf "\t"
            fi
        done
    fi
    checkIfKeyIsKnown $key
    printf "\n"
done

